        -:    0:Source:../src/db.c
        -:    0:Graph:../obj/db.gcno
        -:    0:Data:../obj/db.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "db.h"
        -:    2:
        -:    3:#include <stdlib.h>
        -:    4:#include <stdio.h>
        -:    5:#include <string.h>
        -:    6:#include <ctype.h>
        -:    7:
        -:    8:struct st_db {
        -:    9:    char *filepath;
        -:   10:    size_t size;
        -:   11:    size_t max_size;
        -:   12:    st_student_t *students;
        -:   13:};
        -:   14:
        -:   15:static char * st_db_last_error;
        -:   16:
function st_db_get_last_error called 0 returned 0% blocks executed 0%
    #####:   17:char *st_db_get_last_error(void) {
    #####:   18:    return st_db_last_error;
        -:   19:}
        -:   20:
        -:   21:
        -:   22:bool st_db_init_alloc(st_db_t **db);
        -:   23:bool st_db_init_filepath(st_db_t *db, const char *filepath);
        -:   24:bool st_db_init_db_file(st_db_t *db);
        -:   25:
        -:   26:bool st_db_alloc_students(st_db_t *db);
        -:   27:
        -:   28:
function st_db_init called 7 returned 100% blocks executed 83%
        7:   29:st_db_t * st_db_init(const char *filepath)
        -:   30:{
        -:   31:    st_db_t *db;
        -:   32:
        7:   33:    if(!st_db_init_alloc(&db))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   34:        return NULL;
        7:   35:    if(!st_db_init_filepath(db, filepath))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   36:        return NULL;
        7:   37:    if(!st_db_init_db_file(db))
call    0 returned 100%
branch  1 taken 14% (fallthrough)
branch  2 taken 86%
        1:   38:        return NULL;
        -:   39:
        6:   40:    return db;
        -:   41:}
function st_db_init_alloc called 7 returned 100% blocks executed 75%
        7:   42:bool st_db_init_alloc(st_db_t **db)
        -:   43:{
        7:   44:    *db = calloc(1, sizeof(st_db_t));
        7:   45:    if(*db == NULL)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   46:    {
    #####:   47:        st_db_last_error = ERROR_MALLOC;
    #####:   48:        return false;
        -:   49:    }
        7:   50:    return true;
        -:   51:}
function st_db_init_filepath called 7 returned 100% blocks executed 75%
        7:   52:bool st_db_init_filepath(st_db_t *db, const char *filepath)
        -:   53:{
        7:   54:    size_t filepath_length = strlen(filepath);
        7:   55:    db->filepath = malloc(filepath_length+1);
        7:   56:    if(db->filepath == NULL)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   57:    {
    #####:   58:        st_db_last_error = ERROR_MALLOC;
    #####:   59:        free(db);
    #####:   60:        return false;
        -:   61:    }
        7:   62:    strncpy(db->filepath, filepath, filepath_length);
        7:   63:    return true;
        -:   64:}
        -:   65:
function st_db_init_db_file called 7 returned 100% blocks executed 100%
        7:   66:bool st_db_init_db_file(st_db_t *db)
        -:   67:{
        7:   68:    FILE * db_file = fopen(db->filepath, "a+");
call    0 returned 100%
        7:   69:    if(db_file == NULL) {
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        1:   70:        st_db_last_error = ERROR_CANNOT_OPEN_DB_FILE;
        1:   71:        free(db);
        1:   72:        return false;
        -:   73:    }
        6:   74:    fclose(db_file);
call    0 returned 100%
        6:   75:    return true;
        -:   76:}
        -:   77:
function st_str_trim called 6 returned 100% blocks executed 100%
        6:   78:void st_str_trim(char * str)
        -:   79:{
        6:   80:    int n = strlen(str);
        6:   81:    n--;
       18:   82:    while(n >= 0 && isspace(str[n]))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 50%
branch  4 taken 50% (fallthrough)
        -:   83:    {
        6:   84:        str[n] = '\0';
        6:   85:        n--;
        -:   86:    }
        6:   87:}
        -:   88:
function st_db_read_string_attribute called 7 returned 100% blocks executed 100%
        7:   89:bool st_db_read_string_attribute(char * str, FILE *in)
        -:   90:{
        7:   91:    if(NULL == fgets(
call    0 returned 100%
branch  1 taken 14% (fallthrough)
branch  2 taken 86%
        -:   92:            str,
        -:   93:            MAX_STUDENT_STRLEN,
        -:   94:            in
        -:   95:        ))
        -:   96:    {
        1:   97:        st_db_last_error = ERROR_EOF;
        1:   98:        return false;
        -:   99:    }
        6:  100:    st_str_trim(str);
call    0 returned 100%
        6:  101:    return true;
        -:  102:}
function st_db_read_id_attribute called 3 returned 100% blocks executed 75%
        3:  103:bool st_db_read_id_attribute(unsigned int * value, FILE *in)
        -:  104:{
        -:  105:    long tmp;
        3:  106:    if(0 >= fscanf(in, "%li\n", &tmp))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  107:    {
    #####:  108:        st_db_last_error = ERROR_EOF;
    #####:  109:        return false;
        -:  110:    }
        3:  111:    if(tmp < 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  112:    {
    #####:  113:        st_db_last_error = ERROR_EOF;
    #####:  114:        return false;
        -:  115:    }
        3:  116:    *value = tmp;
        3:  117:    return true;
        -:  118:}
function st_db_read_birth_year_attribute called 3 returned 100% blocks executed 88%
        3:  119:bool st_db_read_birth_year_attribute(unsigned short * value, FILE *in)
        -:  120:{
        -:  121:    int tmp;
        3:  122:    if(0 >= fscanf(in, "%i\n", &tmp))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  123:    {
    #####:  124:        st_db_last_error = ERROR_EOF;
    #####:  125:        return false;
        -:  126:    }
        3:  127:    if(tmp < 0)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  128:    {
        1:  129:        st_db_last_error = ERROR_EOF;
        1:  130:        return false;
        -:  131:    }
        2:  132:    *value = tmp;
        2:  133:    return true;
        -:  134:}
function st_db_read_student called 4 returned 100% blocks executed 100%
        4:  135:bool st_db_read_student(st_student_t * student, FILE *in)
        -:  136:{
        4:  137:    return
        4:  138:        st_db_read_string_attribute(student->first_name, in)
call    0 returned 100%
        3:  139:     && st_db_read_string_attribute(student->last_name, in)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        3:  140:     && st_db_read_id_attribute(&(student->id), in)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        7:  141:     && st_db_read_birth_year_attribute(&(student->birth_year), in);
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
call    2 returned 100%
branch  3 taken 67% (fallthrough)
branch  4 taken 33%
        -:  142:}
function st_db_open_db_file called 4 returned 100% blocks executed 80%
        4:  143:bool st_db_open_db_file(st_db_t *db, const char * mode, FILE **in)
        -:  144:{
        4:  145:    *in = fopen(db->filepath, mode);
call    0 returned 100%
        4:  146:    if(*in == NULL)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  147:    {
    #####:  148:        st_db_last_error = ERROR_CANNOT_OPEN_DB_FILE;
    #####:  149:        return false;
        -:  150:    }
        4:  151:    return true;
        -:  152:}
function st_db_read_size called 4 returned 100% blocks executed 89%
        4:  153:bool st_db_read_size(st_db_t *db, FILE *in)
        -:  154:{
        -:  155:    long long tmp;
        4:  156:    if(0 >= fscanf(in, "%lli\n", &tmp))
call    0 returned 100%
branch  1 taken 25% (fallthrough)
branch  2 taken 75%
        -:  157:    {
        1:  158:        db->size = 0;
        1:  159:        return feof(in);
call    0 returned 100%
        -:  160:    }
        3:  161:    if(tmp < 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  162:    {
    #####:  163:        db->size = 0;
    #####:  164:        st_db_last_error = ERROR_EOF;
    #####:  165:        return false;
        -:  166:    }
        3:  167:    db->size = tmp;
        3:  168:    return true;
        -:  169:}
        -:  170:
function st_db_load called 4 returned 100% blocks executed 95%
        4:  171:bool st_db_load(st_db_t *db)
        -:  172:{
        -:  173:    FILE *in;
        -:  174:
        4:  175:    if(!st_db_open_db_file(db, "r", &in))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  176:        return false;
        -:  177:
        7:  178:    if( ! (
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        4:  179:           st_db_read_size(db, in)
call    0 returned 100%
        3:  180:        && st_db_alloc_students(db)
call    0 returned 100%
        -:  181:    ))
        -:  182:    {
        1:  183:        fclose(in);
call    0 returned 100%
        1:  184:        return false;
        -:  185:    }
        -:  186:
        -:  187:
        5:  188:    for(int i = 0; i < db->size; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  189:    {
        4:  190:        if(!st_db_read_student(&(db->students[i]), in))
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        -:  191:        {
        2:  192:            free(db->students);
        2:  193:            db->size = 0;
        2:  194:            fclose(in);
call    0 returned 100%
        2:  195:            return false;
        -:  196:        }
        -:  197:    }
        1:  198:    return true;
        -:  199:}
        -:  200:
function st_db_alloc_students called 3 returned 100% blocks executed 75%
        3:  201:bool st_db_alloc_students(st_db_t *db)
        -:  202:{
        3:  203:    db->students = calloc(db->size, sizeof(st_student_t));
        3:  204:    db->max_size = db->size;
        3:  205:    if(db->students == NULL)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  206:    {
    #####:  207:        st_db_last_error = ERROR_MALLOC;
    #####:  208:        return false;
        -:  209:    }
        3:  210:    return true;
        -:  211:}
        -:  212:
        -:  213:
function st_db_size called 0 returned 0% blocks executed 0%
    #####:  214:size_t st_db_size(st_db_t *db)
        -:  215:{
    #####:  216:    return db->size;
        -:  217:}
        -:  218:
function st_db_get called 0 returned 0% blocks executed 0%
    #####:  219:st_student_t st_db_get(st_db_t *db, int i)
        -:  220:{
    #####:  221:    return db->students[i];
        -:  222:}
        -:  223:
        -:  224:
        -:  225:
function st_db_add called 0 returned 0% blocks executed 0%
    #####:  226:bool st_db_add(st_db_t *db, st_student_t student)
        -:  227:{
        -:  228:
    #####:  229:    if(db->size == db->max_size)
branch  0 never executed
branch  1 never executed
        -:  230:    {
    #####:  231:        size_t new_allocated_size =
    #####:  232:            (db->size + 1) * sizeof(st_student_t);
    #####:  233:        st_student_t * temp_students =
    #####:  234:        realloc(db->students, new_allocated_size);
    #####:  235:        if(temp_students == NULL)
branch  0 never executed
branch  1 never executed
        -:  236:        {
    #####:  237:            st_db_last_error = ERROR_MALLOC;
    #####:  238:            return false;
        -:  239:        }
    #####:  240:        db->max_size++;
    #####:  241:        db->students = temp_students;
        -:  242:    }
        -:  243:
    #####:  244:    db->students[db->size] = student;
    #####:  245:    db->size++;
    #####:  246:    return true;
        -:  247:}
        -:  248:
        -:  249:
function st_db_write_size called 0 returned 0% blocks executed 0%
    #####:  250:bool st_db_write_size(st_db_t *db, FILE *out)
        -:  251:{
    #####:  252:    if(0 >= fprintf(out, "%zi\n", db->size))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  253:    {
    #####:  254:        st_db_last_error = ERROR_WRITING;
    #####:  255:        return false;
        -:  256:    }
    #####:  257:    return true;
        -:  258:}
function st_db_write_string_attribute called 0 returned 0% blocks executed 0%
    #####:  259:bool st_db_write_string_attribute(const char * str, FILE *out)
        -:  260:{
    #####:  261:    if(0 >= fprintf(out, "%s\n", str))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  262:    {
    #####:  263:        st_db_last_error = ERROR_WRITING;
    #####:  264:        return false;
        -:  265:    }
    #####:  266:    return true;
        -:  267:}
function st_db_write_id_attribute called 0 returned 0% blocks executed 0%
    #####:  268:bool st_db_write_id_attribute(unsigned int id, FILE *out)
        -:  269:{
    #####:  270:    if(0 >= fprintf(out, "%u\n", id))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  271:    {
    #####:  272:        st_db_last_error = ERROR_WRITING;
    #####:  273:        return false;
        -:  274:    }
    #####:  275:    return true;
        -:  276:}
function st_db_write_birth_year_attribute called 0 returned 0% blocks executed 0%
    #####:  277:bool st_db_write_birth_year_attribute(unsigned short by, FILE *out)
        -:  278:{
    #####:  279:    if(0 >= fprintf(out, "%hu\n", by))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  280:    {
    #####:  281:        st_db_last_error = ERROR_WRITING;
    #####:  282:        return false;
        -:  283:    }
    #####:  284:    return true;
        -:  285:}
        -:  286:
function st_db_write_student called 0 returned 0% blocks executed 0%
    #####:  287:bool st_db_write_student(st_student_t *student, FILE *out)
        -:  288:{
    #####:  289:    return
    #####:  290:        st_db_write_string_attribute(student->first_name, out)
call    0 never executed
    #####:  291:    &&  st_db_write_string_attribute(student->last_name, out)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  292:    && st_db_write_id_attribute(student->id, out)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  293:    && st_db_write_birth_year_attribute(student->birth_year, out);
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  294:}
        -:  295:
function st_db_save called 0 returned 0% blocks executed 0%
    #####:  296:bool st_db_save(st_db_t *db)
        -:  297:{
        -:  298:    FILE *out;
    #####:  299:    if(!st_db_open_db_file(db, "w", &out))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  300:        return false;
        -:  301:
    #####:  302:    if(!st_db_write_size(db, out))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  303:        return false;
        -:  304:
    #####:  305:    for(int i = 0; i < db->size; i++)
branch  0 never executed
branch  1 never executed
        -:  306:    {
    #####:  307:        if(!st_db_write_student(& db->students[i], out))
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  308:            return false;
        -:  309:    }
        -:  310:
    #####:  311:    return true;
        -:  312:}
        -:  313:
function st_db_remove called 0 returned 0% blocks executed 0%
    #####:  314:void st_db_remove(st_db_t *db, int to_be_deleted)
        -:  315:{
    #####:  316:    for(int i = to_be_deleted; i < db->size - 1; i++)
branch  0 never executed
branch  1 never executed
        -:  317:    {
    #####:  318:        db->students[i] = db->students[i+1];
        -:  319:    }
    #####:  320:    db->size--;
    #####:  321:}
        -:  322:
function st_db_remove_by_id called 0 returned 0% blocks executed 0%
    #####:  323:bool st_db_remove_by_id(st_db_t *db, unsigned int id)
        -:  324:{
    #####:  325:    for(int i = 0; i < db->size; i++)
branch  0 never executed
branch  1 never executed
        -:  326:    {
    #####:  327:        if(db->students[i].id == id)
branch  0 never executed
branch  1 never executed
        -:  328:        {
    #####:  329:            st_db_remove(db, i);
call    0 never executed
    #####:  330:            return true;
        -:  331:        }
        -:  332:    }
    #####:  333:    st_db_last_error = ERROR_ID_NOT_FOUND;
    #####:  334:    return false;
        -:  335:}
        -:  336:
        -:  337:
function st_db_free called 0 returned 0% blocks executed 0%
    #####:  338:void st_db_free(st_db_t *db)
        -:  339:{
    #####:  340:    if(db->max_size)
branch  0 never executed
branch  1 never executed
    #####:  341:        free(db->students);
        -:  342:
    #####:  343:    free(db->filepath);
    #####:  344:    free(db);
    #####:  345:}
