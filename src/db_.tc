#include "db.h"

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

struct st_db {
    char *filepath;
};

static char * st_db_last_error;

int st_db_init_db_struct(st_db_t *db);
int st_db_init_db_file(st_db_t *db);
int st_db_init_filepath(st_db_t *db, const char *filepath);


st_db_t * st_db_init(const char *filepath)
{
    st_db_t *db = calloc(1, sizeof(st_db_t));

    if(!st_db_init_db_struct(db))
        return NULL;

    if(!st_db_init_filepath(db, filepath))
        return NULL;

    if(!st_db_init_db_file(db))
        return NULL;

    return db;
}
/*
if(
       st_db_init_db_struct(db)
    && st_db_init_filepath(db, filepath)
    && st_db_init_db_file(db))
{
    return db;
}*/

int st_db_init_db_struct(st_db_t *db)
{
    if(db == NULL) {
        st_db_last_error = ERROR_MALLOC;
        return 0;
    }
    return 1;
}

int st_db_init_db_file(st_db_t *db)
{
    FILE * db_file = fopen(db->filepath, "w");
    if(db_file == NULL) {
        st_db_last_error = ERROR_CANNOT_OPEN_DB_FILE;
        free(db);
        return 0;
    }
    fclose(db_file);
    return 1;
}
int st_db_init_filepath(st_db_t *db, const char *filepath)
{
    size_t filepath_length = strlen(filepath);
    db->filepath = malloc(filepath_length+1);
    if(db->filepath == NULL)
    {
        st_db_last_error = ERROR_MALLOC;
        free(db);
        return 0;
    }
    strncpy(db->filepath, filepath, filepath_length);
    return 1;
}


void st_db_load(st_db_t *db)
{
    (void)db;
}